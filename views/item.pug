extends layout.pug

block title
    title DB Land - #{item.name}

block content
    -
        const propNames = new Map([
            ['lifesteal', 'Lifesteal'],
            ['gold', 'Gold'],
            ['evasion', 'Evasion'],
            ['reflection', 'Reflection'],
            ['crit', 'Crit'],
            ['attack', 'Damage'],
            ['range', 'Range'],
            ['ignore', 'Not Avaliable'],
            ['hp', 'Health'],
            ['mp', 'Mana'],
            ['freeze', 'Freeze'],
            ['str', 'Strength'],
            ['int', 'Intelligence'],
            ['dex', 'Dexterity'],
            ['vit', 'Vitality'],
            ['stat', 'Stat'],
            ['armor', 'Armor'],
            ['apiercing', 'A. Piercing'],
            ['resistance', 'Resistance'],
            ['rpiercing', 'R. Piercing'],
            ['dreturn', 'D. Return'],
            ['speed', 'Speed'],
            ['xp', 'XP'],
            ['frequency', 'A. Speed'],
        ])

        const attrNames = new Map([
            [
                'bash',
                new Map([
                    ['attr0', 'Stun Chance'],
                    ['attr1', 'Stun Duration']
                ])
            ],
            [
                'secondchance',
                new Map([
                    ['attr0', 'Second Chance']
                ])
            ],
            [
                'freeze',
                new Map([
                    ['attr0', 'Freeze']
                ])
            ],
            [
                'posion',
                new Map([
                    ['attr0', 'Poison']
                ])
            ],
            [
                'Power',
                new Map([
                    ['attr0', 'Power']
                ])
            ]
        ])

        const abilityText = new Map([
            [
                'bash',
                'Stuns the opponent for %attr1 seconds with %attr0% chance.'
            ],
            [
                'secondchance',
                'Avoid death with %attr0% chance.'
            ],
            [
                'freeze',
                'Freeze with %attr0% chance.'
            ],
            [
                'posion',
                'Poison with %attr0% chance.'
            ],
            [
                'power',
                'Power with %attr0% chance.'
            ]
        ])

        const propOrder = new Map([...propNames.keys()].map((k, i) => [k, i]))

    //-
    .horizontal-flex.vmargin
        .static-column.rmargin.border.vertical-flex
            if show_price
                a.margin.vertical-flex(href=`/items/${type}`)
                    .sprite-container.small
                        div(style=sprites.item(type, 32))
                    .title=item.name
            else
                .sprite-container.small
                    div(style=sprites.item(type, 32))
                .title=item.name

        .column.border
            .subtitle Item Information
            .horizontal-flex
                .column
                    mixin attribute(prop)
                        - let value = item[prop]

                        if value
                            mixin n
                                | #{propNames.get(prop)}
                            mixin v(precision = -1)
                                if precision == -1
                                    | #{value}
                                else
                                    | #{formatNumber(value, precision)}

                            .info
                                block

                    +attribute('range') #[+n]: #[span.gray +#[+v]]
                    +attribute('lifesteal') #[+n]: #[span.gray #[+v]%]
                    +attribute('evasion') #[+n]: #[span.gray #[+v]%]
                    +attribute('reflection') #[+n]: #[span.gray #[+v]%]
                    +attribute('gold') #[+n]: #[span.gray #[+v]%]
                    +attribute('crit') #[+n]: #[span.gray #[+v]%]
                    +attribute('attack') #[+n]: #[span.gray #[+v]]
                    +attribute('ignore') #[+n]: #[span.gray #[+v]]
                    +attribute('hp') #[+n]: #[span.gray #[+v]]
                    +attribute('mp') #[+n]: #[span.gray #[+v]]
                    +attribute('str') #[+n]: #[span.gray #[+v]]
                    +attribute('int') #[+n]: #[span.gray #[+v]]
                    +attribute('dex') #[+n]: #[span.gray #[+v]]
                    +attribute('vit') #[+n]: #[span.gray #[+v]]
                    +attribute('stat') #[+n]: #[span.gray #[+v]]
                    +attribute('armor') #[+n]: #[span.gray #[+v]]
                    +attribute('apiercing') #[+n]: #[span.gray #[+v]]
                    +attribute('resistance') #[+n]: #[span.gray #[+v]]
                    +attribute('rpiercing') #[+n]: #[span.gray #[+v]]
                    +attribute('dreturn') #[+n]: #[span.gray #[+v]]
                    +attribute('speed') #[+n]: #[span.gray #[+v]]

                    if item.ability
                        - let text = abilityText.get(item.ability)
                        - text = text.replace('%attr0', item.attr0)
                        - text = text.replace('%attr1', item.attr1)
                        div.gray.rmargin=text

                    +attribute('explanation') #[div.gray.rmargin #[+v]]

                .column
                    .info Name: #[span.gray=type]
                    .info Type: #[span.gray=item.type]
                    .info Value: #[span.gray #{formatNumber(item.g)} GOLD]
                    if item.grades
                        .info Grades: #[span.gray #{item.grades.join(', ')}]

        if (!show_price)
            .static-column.lmargin.border.vertical-flex
                a.box.margin.vertical-flex(href=`/market/${type}`)
                    .sprite-container.small
                        div(style=sprites.item('stand0', 32))
                    .title Market

    - let scaling = item.upgrade || item.compound
    if scaling
        .vmargin.border
            table.scaling
                -
                    let levels = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]
                    let multipliers = [1, 1, 1, 1, 1, 1, 1.25, 1.5, 2, 3, 1.25, 1.5]
                    let unrounded = ['evasion', 'reflection', 'lifesteal', 'dreturn', 'rpiercing', 'apiercing', 'frequency', 'attr0', 'attr1']

                    if (item.compound)
                        multipliers = [1, 1, 1, 1, 1.25, 1.5, 2, 3, 3, 3, 2, 3]

                thead
                    tr
                        th
                        each i in levels
                            th.align-center +#{i}

                tbody
                    - let properties = Object.keys(scaling)
                    - properties.sort((a, b) => propOrder.get(a) - propOrder.get(b))

                    each property in properties
                        - let isRounded = !unrounded.includes(property)
                        - let acc = item[property]

                        tr
                            if item.ability && property.startsWith('attr')
                                td=attrNames.get(item.ability).get(property)
                            else
                                td=propNames.get(property)

                            each i in levels
                                if isRounded
                                    td.gray.align-center=formatNumber(acc)
                                else
                                    td.gray.align-center=formatNumber(acc, 3)

                                -
                                    if (property == 'stat') {
                                        acc += Math.round(scaling[property] * multipliers[i])
                                        if (i >= 6) acc++;
                                    } else {
                                        acc += scaling[property] * multipliers[i]
                                    }

            table.scaling

                tbody

                        each group, group_type in upgrades                

                            each citem in group.data
                                if (citem.name == item.name)
                                    tr
                                        td Upgrade Chance
                                        td
                                        - var lvl = 1;
                                        - var cumul_chance = 1;
                                        - var previous_cost = 0;
                                        while lvl <= 10
                                            - var result = citem.results[lvl-1];
                                            if result
                                                - var chance = result.success / (result.success + result.fails);
                                                - cumul_chance *= chance;
                                                - previous_cost = (previous_cost + scroll_cost(citem.item, lvl-1)) / chance;
                                                td.info.align-center
                                                    | #{Math.round(chance * 100)}%
                                                    br
                                                    span.gray #{Math.round(cumul_chance*10000)/100}%
                                                    br
                                                    span.gray.medsmall (#{result.success + result.fails})
                                                    br
                                                    span.gray.small #{formatNumber(Math.round(previous_cost))}
                                            else
                                                td.info.align-center N/A
                                            - lvl++;
    if !show_price
        .horizontal-flex.vmargin
            .column.border
                table
                    tbody
                        tr
                            td Exchanges

        each itemd, itemkey in exchanges
            each itemdata, itemlevel in itemd
                - var has_data = false;
                each record in itemdata
                    if record.result == type
                        - has_data = true;

                if has_data

                    .horizontal-flex.vmargin
                        .column.border
                            table
                                tbody
                                    tr
                                        td
                                            a(href=`/items/${itemkey}`).sprite-container.small
                                                span(style=sprites.item(itemkey, 32))
                                        if itemd.length > 1
                                            td #{items_data[itemkey].name} +#{itemlevel}
                                        else
                                            td #{items_data[itemkey].name}
                            hr
                            table.exchanges
                                thead
                                    tr
                                        th
                                        th.align-center Item
                                        th.align-center Amount
                                        th.align-center Times Seen
                                        th.align-center Chance
                                    td.dashed(colspan=11)
                                tbody.list
                                    each record in itemdata
                                        if record.result == type
                                            tr.items
                                                td
                                                    a(href=`/items/${record.result}`).sprite-container.small
                                                        div(style=sprites.item(record.result, 32))
                                                td
                                                    if (record.result == "gold")
                                                        .info Gold
                                                    else
                                                        a.name(href=`/items/${record.result}`)=items_data[record.result].name
                                                    if record.amount > 0
                                                        td.align-center #{formatNumber(record.amount)}
                                                    if record.seen
                                                        td.align-center #{record.seen}
                                                    if record.total
                                                        td.align-center #{ Math.round(record.seen/record.total * 10000)/100}%

    if !show_price
        .horizontal-flex.vmargin
            .column.border
                table
                    tbody
                        tr
                            td Drops

        if show_dropped && dropped.length
            .vmargin.border
                table.drops#drops
                    thead
                        tr
                            th
                            th.sort(data-sort='monster') Monster
                            th.sort(data-sort='map') Map
                            th.sort(data-sort='count')  Count
                            th.align-right.sort(data-sort='rate') %
                    tr
                        td.dashed(colspan=5)
                    tbody.list
                        each drop in dropped
                            if drop.drops > 1
                                tr
                                    td
                                        a(href=`/monsters/${drop.monster}`).sprite-container.small
                                            div(style=sprites.monster(drop.monster, 32))
                                    td
                                        a.monster(href=`/monsters/${drop.monster}`)=drop.name
                                    td.map=drop.mapName
                                    td.count #{formatNumber(drop.drops)} out of #{formatNumber(drop.kills)}
                                    td.rate.align-right #{formatNumber(drop.rate, 3)}
            script.
                var options = {
                    valueNames: ['monster', 'map', 'count', 'rate']
                };
                var list = new List('drops', options);
                list.sort('rate', { order: 'desc'});

            script.
                var options = {
                    valueNames: ['monster', 'map', 'count', 'rate']
                };
                var list = new List('drops', options);
                list.sort('rate', { order: 'desc'});
    
    if npcs && !show_price
        .horizontal-flex.vmargin
            .column.border
                table
                    tbody
                        tr
                            td Sells

        .horizontal-flex.spread.vmargin
            each npc in npcs
                - var do_sell = false;
                - var c_npc = npcs_data[npc.type];
                if c_npc.items
                    each item in c_npc.items
                        if item && item == type
                            - do_sell = true;

                if do_sell
                    a.box.border.margin.vertical-flex(href=`/npcs/${npc.type}`)
                        .sprite-container
                            div(style=sprites.npc(npc.skin, 64))
                        if npc.name
                            span.align-center=npc.name
                        else
                            span.align-center=npc.type

    if item.quest && !show_price
        .horizontal-flex.vmargin
            .column.border
                table
                    tbody
                        tr
                            td Trades

        .horizontal-flex.spread.vmargin
            each npc in npcs
                - var do_sell = false;
                - var c_npc = npcs_data[npc.type];
                if c_npc.quest == item.quest

                    a.box.border.margin.vertical-flex(href=`/npcs/${npc.type}`)
                        .sprite-container
                            div(style=sprites.npc(npc.skin, 64))
                        if npc.name
                            span.align-center=npc.name
                            if item.e
                                span.align-center=item.e
                        else
                            span.align-center=npc.type
                            if item.e
                                span.align-center=item.e


    if show_price
        block price